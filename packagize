#!/usr/bin/env ruby
require 'FileUtils'

if RUBY_VERSION.to_f < 1.9
   puts "Your interpreter version is #{RUBY_VERSION}. This tool requires ruby
   1.9.* or higher to run."
   exit
end

module JTools
   # this tries to match the declaration of a class, interface or enum. If a
   # line matches, we know that no package declaration can follow.
   CLS_DECL_REGEX = /.*(class|interface|enum).*/
   # this tries to match a package declaration
   PKG_DCL_REGEX = /\s*package\s+\w+(\.\w+)*;\s*$/
   # for extracting the actual package path without 'package' and ';' by use of
   # String#gsub. Simply deletes the word 'package' and the trailing semicolon
   # as well as whitespace
   EXTR_PKG = /\s*package\s+|;\s*/
   # This tries to match allowed package names, which must not begin with an
   # uppercase letter or number
   PACKAGE_NAME = /^[a-z_]\w*$/ # somehwat liberal naming standards
end

=begin
   This class is represents a (java) package; basically just a collection of files
   and subpackages. 
=end
class Package
   include FileUtils # for cp
   attr_reader :name, :subpackages, :files
   def initialize name, verbose = true
      @name = name
      @verbose = verbose
      @subpackages = Hash.new
      @files = Array.new
   end
   def get_files
      @files.dup.concat((@subpackages.values.map { |pack| pack.get_files }).flatten)
   end
   def file_count
      count = @files.size
      subpackages.each_value do |pack|
         count += pack.file_count
      end
      count
   end
   # add a Package object as a subpackage of this package
   def add_subpackage pack
      if not pack.is_a? Package
         raise TypeError
      end
      if pack.name =~ JTools::PACKAGE_NAME
         @subpackages[pack.name] = pack # map name to package object
      else puts "Invalid pacakge name '#{pack.name}'. Skipping."
      end
   end
   # add a file (not a Package) to this package. The file's package declaration
   # should end with the name of this Package
   def add_file file
      if not File.file? file
         raise ArgumentError
      else
         @files.push file
         puts "#{File.basename file} added to package #{@name}" if @verbose
      end
   end
   # string representation of this package
   def to_s
      "#{@name} => Files: \n\t#{@files.join "\n\t"}\n Subpackages:
      \t#{@subpackages.keys.join "\n\t"}"
   end
   # build the physical package structure on the file system with all
   # subpackages and files correctly arranged
   def build_directory root
      root += "/" if not root.end_with? "/" # add backslash for later concatenation
      if not caller[0] =~ /.*build_directory.*/
         puts "Building in #{root + @name}."
         puts "Warning. No files in this package tree." if file_count == 0
      end
      Dir.mkdir(root + @name) if not File.exist? root + @name # make root dir if not already present
      @files.each do |file|
         puts "Copying file #{File.basename file} to #{root + @name}." if @verbose
         begin
            if @verbose and File.exists? root + @name
               puts "File already present."
            end
            cp file, root + @name 
         rescue ArgumentError # raised if files are identical
            puts "Warning: Can't copy #{File.basename file}. Source and destination are identical."
         end
      end
      @subpackages.each_value do |p| # recursively build directory tree
         p.build_directory root + @name
      end
   end
end

=begin
   Instances of this class aggregate files (java by default) in themselves and
   search a given path to accomplish this.
=end
class ClassCollector
   include FileUtils
   attr_reader :files
   # if no path given, search ".". Not sure if works on Windows
   def initialize root=".", verbose = true, ext=".java"
      @root = File.absolute_path root
      @verbose = verbose
      @files = Hash.new # files found
      @extension = ext
   end
   # start search in @root. 
   def collect recursive = true
      collect_in_dir  @root, recursive
   end
   # Parse the package name from a package declaration (only applies to java
   # files)
   def parse_pkg fname
      if File.extname(fname) == @extension
         lines = IO.readlines fname
         lines.each do |l|
            begin
               break if l =~ JTools::CLS_DECL_REGEX # stop if we find the class header
               next if l.strip.start_with? "/*", "*", "//"
               if l =~ JTools::PKG_DCL_REGEX # if package declaration found
                  pkg_name = l.gsub JTools::EXTR_PKG, "" # extract path
                  return pkg_name
               end
            rescue ArgumentError => e
               puts "Error matching line '#{l}' In #{fname}. " + e.message
            end
         end
         puts "Warning: #{File.basename fname} has no or no valid package" +
         " declaration. Adding to default package." if @verbose
         "" # if we found nothing -> default package
      else
         raise ArgumentError.new "Error. #{fname} is no #{@extension} file."
      end
   end

   private
   # collect all files with the given extension in a directory
   def collect_in_dir directory, recursive = true
      if not File.readable? directory
         puts "#{directory} not readable. Skipping." if @verbose
      else
         directory += "/" if not directory.end_with? "/"
         if File.directory? directory
            files = Dir.entries directory
            files.reject! {|d| d.match /^\.{1,2}$/} # ignore parent and self links
            files.map! { |f| directory + f }
            files.each do |fname|
               if File.directory?(fname) and recursive
                  collect_in_dir fname
               elsif not File.readable? fname
                  puts "#{fname} not readable.Skipping." if @verbose
               elsif File.file? fname and File.extname(fname) == @extension # if no directory
                  pkg_info = parse_pkg fname
                  @files[fname] = pkg_info if pkg_info
               end
            end
         end
      end
   end
end

=begin
   Top level (Object) methods to run the tool
=end
def print_usage 
   puts "Usage: packagize [-h] [-v] [-r] [-s source_dir] [-d dest_dir]"
   puts "\tSource and destination default to the current working directory."
   puts "\t-r search directory and all subdirectories. Defaults to true."
   puts "\t-v display verbose output. Defaults to false."
   puts "\t-h display this text."
end

def parse_args arguments
   # parse cl arguments and delete if found -> ARGV must be empty if correct
   if arguments.index "-h"
      print_usage
      exit
   end
   search_dir = "."
   search_flag_pos = arguments.index "-s"
   if search_flag_pos
      search_dir = arguments[search_flag_pos + 1]
      if not search_dir
         puts "Error. Path must follow -s flag." 
         exit
      elsif not File.directory? search_dir
         puts "Error. #{search_dir} is no directory."
         exit
      else 
         arguments.delete_at search_flag_pos + 1
         arguments.delete_at search_flag_pos
      end
   end
   dest_dir = "."
   dest_flag_pos = arguments.index "-d"
   if dest_flag_pos
      dest_dir = arguments[dest_flag_pos + 1]
      if not dest_dir
         puts "Error. Path must follow -d flag." 
         exit
      elsif not File.directory? dest_dir
         puts "Error. #{dest_dir} is no directory."
         exit
      else 
         arguments.delete_at dest_flag_pos + 1
         arguments.delete_at dest_flag_pos
      end
   end
   recursive = false
   if arguments.index "-r"
      recursive = true 
      arguments.delete_at arguments.index "-r"
   end
   verbose = false
   if arguments.index "-v"
      verbose = true
      arguments.delete_at arguments.index "-v"
   end
   if not arguments.empty?
      puts "Excess arguments: #{arguments.join ', '}. Exiting."
      print_usage
      exit
   else
      return {:recursive => recursive,
              :verbose => verbose,
              :dest_dir => dest_dir,
              :search_dir => search_dir}
   end
end

def build search_dir=".", dest_dir=".", verbose=false, recursive=true
   c = ClassCollector.new search_dir, verbose
   c.collect recursive
   pkg_root = Package.new "src", verbose
   c.files.each do |k,v|
      parent = pkg_root
      if v.empty?
         parent.add_file k
      else
         while not v.empty?
            subpkg_name = v.split(".").first
            subpkg = (parent.subpackages[subpkg_name] or
                      Package.new(subpkg_name, verbose))
            parent.add_subpackage subpkg unless parent.subpackages.has_key? subpkg.name
            parent = subpkg
            v.slice! subpkg.name
            if v.start_with? "."
               v = v[1,v.length]
            end
         end
         subpkg.add_file k
      end
   end
   pkg_root.build_directory File.absolute_path dest_dir
   Dir.chdir dest_dir
   Dir.mkdir "bin" if not File.exists? "bin"
   puts "Attempting compilation ..."
   cmd = "javac -d bin -classpath $CLASSPATH:bin #{pkg_root.get_files.map { |f| f.gsub /\s/, '\ '}.join ' '}"
   puts cmd
   `#{cmd}`
end
if __FILE__ == $0
   arguments = parse_args ARGV
   build arguments[:search_dir], arguments[:dest_dir],  arguments[:verbose],
      arguments[:recursive]
end
